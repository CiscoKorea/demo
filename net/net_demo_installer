#!/bin/bash

USAGE="Usage: $0 [-c] <host1:ssh_port> <host2:ssh_port> <host3:ssh_port> ..."

HOST_INVENTORY_FILE="./.gen/contiv_hosts"
HOST_LOG_FILE="./.gen/hosts.log"
HOST_SUDO_LOG_FILE="./.gen/hosts_sudo.log"
HOST_IP_LOG_FILE="./.gen/host_ip.log"
HOST_SETUP_LOG_FILE="./.gen/setup.log"
ENV_FILE="./.gen/env.json"
ANSIBLE_SITE_FILE="./ansible/site.yml"
NETPLUGIN_HOSTGROUP="netplugin-node"

num_nodes=$#
declare -A node_if
declare -A node_ip

# Function to parse the arguments
function ParseArguments {
    for ((i=1; i<=$#; i++)); do
        node_name=node$i
        node_ip[$node_name]=$(echo ${!i} | cut -f1 -d:)
        node_if[$node_name]=eth0
        if echo ${!i} | grep ":" > /dev/null; then
            node_if[$node_name]=$(echo ${!i} | cut -f2 -d:)
        fi
    done
}

# Function to get user confirmation to proceed
function ConfirmPrompt {
  while true; do
  read -p "Ready to proceed(y/n)? " choice
  if [ "$choice" == "y" ]; then
      break
  fi
  
  if [ "$choice" == "n" ]; then
      echo "Try again when you are ready."
      exit 1
  else
      echo "Please answer y or n"
      continue
  fi
  done
}

# Function to generate inventory file
function GenerateInventoryFile {
    echo "[$NETPLUGIN_HOSTGROUP]" > $HOST_INVENTORY_FILE
    echo "Writing to file for $# hosts"
    for ((i=1; i<=$#; i++)); do
        node_name=node$i
        echo "${node_name} ansible_ssh_host=${node_ip[$node_name]} monitor_interface=${node_if[$node_name]}" >> $HOST_INVENTORY_FILE
    done
}

# Check if user want to clear all files generated by previous run of install script
while getopts c opt; do
    echo "Clear option is set to clear all files generated by the script... "
    echo "This will clear the ansible repository and files in .gen folder: "
    ls .gen/
    ConfirmPrompt
    $(rm -rf .gen/)
    $(rm -rf ansible/)
    exit 0
done

if [ $# -lt 1 ]; then
    echo $USAGE
    exit 1
fi

ans_opts=

# Parse the arguments to fetch IP and interface information
ParseArguments $@

echo " "
echo "        ==Contiv Netplugin Demo Installer=="
echo " "
echo "Netplugin Cluster will be set up on the following servers: "
echo " "
for ((i=1; i<=$#; i++)); do
    echo "  ${node_ip[node$i]}  "
done
echo " "
echo "IMPORTANT: You need to specify ALL hosts you're adding to the cluster"
echo "           on he command line. Setting them up one at a time is not"
echo "           supported"
echo " "

ConfirmPrompt

# Create folder to hold all generated files
mkdir .gen > /dev/null 2>&1

# Verify ubuntu version
uver=`cat /etc/issue.net |  awk '{x=2 ; print substr($x,1,2)}'`
if [ "$uver" -eq "15" ]; then
    echo "OK Found `cat /etc/issue.net` on this host"
else
    echo "ERROR Found `cat /etc/issue.net`"
    echo "Need version 15 on this machine"
    exit 1
fi

# Install python, pip and ansible
echo "Performing apt-get update, this might take a while..."
sudo apt-get update
echo "Installing python, pip and ansible...."
sudo apt-get install build-essential git python-dev python-pip sshpass -y
sudo -E pip install ansible

if ! $(which ansible > /dev/null 2>&1)
then
    echo "Fatal: ansible installation failed!\n"
    exit 1
fi

# Check and pull ansible repository
if $(cd ansible > /dev/null 2>&1) 
then
    echo "Ansible repository already exists. Proceeding..."
    $(cd ..)
else
    echo "Pulling ansible repository..."
    if ! $(git clone https://github.com/contiv/ansible.git)
    then
        echo "Unable to pull ansible git repository. Please verify git parameters to resolve issue."
        exit 1
    fi
fi

# Generate inventory file
GenerateInventoryFile $@

if [ $? -ne 0 ]; then
    echo "Fatal: error generating inventory file"
    exit 1
fi

# Prepare ansible for auth expectations
echo "\
[defaults]
host_key_checking = False" > ~/.ansible.cfg

echo "Contents of $HOST_INVENTORY_FILE:"
echo "-----------------"
cat $HOST_INVENTORY_FILE
echo "-----------------"

# Verify ansible can reach all hosts
echo "Verifying ansible reachability"
ansible all -i $HOST_INVENTORY_FILE -a "/bin/cat /etc/issue.net" >& $HOST_LOG_FILE
grep FAIL $HOST_LOG_FILE >& /dev/null
if [ $? -eq 0 ]; then
   echo "WARNING"
   echo "WARNING Some of the hosts are not accessible via passwordless SSH"
   echo "WARNING"
   echo "`grep FAIL $HOST_LOG_FILE`"
   echo " "
   echo "This means either the host is unreachable or passwordless SSH is not"
   echo "set up for it. It is RECOMMENDED that you resolve this before"
   echo "proceeding. If this is JUST a passwordless SSH issue, you may choose"
   echo "to proceed and respond to password prompts(there would a multitude"
   echo "of those...)"

   ConfirmPrompt
   ans_opts=k
fi

# Verify Ubuntu version on all hosts
echo "Verifying Ubuntu versions on all hosts..."
cat $HOST_LOG_FILE |  awk '/Ubuntu/ {x=2 ; if (substr($x,1,2) != 15) { print "ERROR Some of the hosts need to be upgraded to Ubuntu 15"; exit 1} }'
if [ $? -eq 1 ]; then
cat $HOST_LOG_FILE
exit 1
fi

echo "Verifying sudo access on all hosts..."
ansible all -i $HOST_INVENTORY_FILE -a "sudo -n /bin/cat /etc/sudoers" >& $HOST_SUDO_LOG_FILE 
res=`grep FAIL $HOST_SUDO_LOG_FILE`
if [ ! -z "$res" ]; then
   echo "WARNING Some of the hosts do not have passwordless sudo enabled"
   echo "WARNING"
   echo "`grep FAIL $HOST_SUDO_LOG_FILE`"
   echo " "
   echo "It is RECOMMENDED that you resolve this before proceeding. However,"
   echo "you may choose to proceed and respond to password prompts (there "
   echo "could be a multitude of those...)"
   echo " "

   ConfirmPrompt
   ans_opts=K$ans_opts
fi

if [ ! -z "$ans_opts" ]; then
   ans_opts=-$ans_opts
fi

echo ""
echo "Ansible access and Ubuntu version verification completed on all hosts"
set -e

echo "-----------------"

# Get IP of all nodes
rm -rf $HOST_IP_LOG_FILE
for ((i=1; i<=$#; i++)); do
    ansible ${node_ip[node$i]} -m setup $ans_opts -i $HOST_INVENTORY_FILE | grep -A 4 ansible_${node_if[node$i]} | grep address | awk -F \" '{print $4}' >> $HOST_IP_LOG_FILE
done

# Use netmaster's default ip as service vip
master_node=node1
svc_vip=$(ansible $master_node -m setup $ans_opts -i $HOST_INVENTORY_FILE | grep -A 4 ansible_${node_if[$master_node]} | grep address | awk -F \" '{print $4}')
no_proxy=$(sed ':a;N;$!ba;s/\n/,/g' $HOST_IP_LOG_FILE)",127.0.0.1,localhost,netmaster"
echo '{"env":{"http_proxy":"'$http_proxy'", "HTTP_PROXY":"'$http_proxy'", "https_proxy":"'$https_proxy'", "no_proxy":"'$no_proxy'"}, "etcd_peers_group": '"\"$NETPLUGIN_HOSTGROUP\""', "service_vip": '"\"$svc_vip\""'}' > $ENV_FILE

# Execute ansible-playbook to install the necessary services on the nodes
ansible-playbook $ans_opts -i $HOST_INVENTORY_FILE  -e "`cat $ENV_FILE`" $ANSIBLE_SITE_FILE

# Verify if the installation is successful by checking status of installed services
DOCKER_HOST=$(service swarm status | grep "tcp://" | awk '{ print $5 }')
if [ -z "$DOCKER_HOST" ]; then
  echo "swarm status does not look correct. Please retry install."
else
  echo "Install complete."
  echo "========================================================="
  echo " "
  echo "Please export DOCKER_HOST=$DOCKER_HOST in your shell before proceeding"
  echo " "
  echo "========================================================="
fi

